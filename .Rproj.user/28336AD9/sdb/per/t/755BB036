{
    "collab_server" : "",
    "contents" : "library(argparser)\nlibrary(data.table)\n\nargs <- arg_parser('program')\n\nargs <- add_argument(args, '-geno012',\n                     help='genotype 012 file',\n                     default='/work-zfs/abattle4/ashis/progdata/misc/cross_mappability/gtex_v7/genotype_process/chr22_maf_0.05_repeat_masked.012')\nargs <- add_argument(args, '-vcf',\n                     help='vcf file where 012 file was generated from',\n                     default='/work-zfs/abattle4/ashis/progdata/misc/cross_mappability/gtex_v7/genotype_process/chr22_maf_0.05_repeat_masked.vcf')\nargs <- add_argument(args, '-o',\n                     help='output file',\n                     default='results/geno.txt')\n\nargv = parse_args(args)\ngenotype_012_fn = argv$geno012\nvcf_fn = argv$vcf\nout_fn = argv$o\n\n### read util\nread_df <- function(fn, sep = '\\t',  header = T, quote = \"\", row.names=T, stringsAsFactors = F, check.names = F, lessColInHeader=F, skip = 0){\n  if(header==T && lessColInHeader==T){\n    header_line = readLines(fn, n = 1)\n    headers = strsplit(header_line, split = sep)[[1]]\n    skip = skip + 1\n  }\n  \n  data_df = fread(fn, \n                  sep = sep,\n                  header = header & !lessColInHeader, \n                  skip = skip,\n                  quote = quote,    # not available in old package\n                  stringsAsFactors = stringsAsFactors, \n                  check.names = check.names, \n                  data.table = FALSE)\n  if (row.names == TRUE){\n    rownames(data_df) = data_df[,1]\n    data_df = data_df[,-1, drop=F]\n  }\n  if(header==T && lessColInHeader==T){\n    colnames(data_df) = headers\n  }\n  return(data_df)\n}\n\nwrite_df <- function(x, file, sep = \"\\t\", quote = F, row.names = T, col.names = NA){\n  write.table(x = x, file = file, sep = sep, quote = quote, row.names = row.names, col.names = col.names)\n}\n\nread_vcf_variant_info <- function(vcf_fn){\n  cmd = sprintf(\"grep -v '^#' '%s' | cut -f1-3\", vcf_fn)\n  lines = system(cmd, intern=T)\n  infos = t(sapply(strsplit(lines, split = '\\t'), function(x) x))\n  colnames(infos) = c('Chr','Pos','VariantID')\n  return(infos)\n}\n\n\n### read expression\ngeno_df = read_df(fn = genotype_012_fn, sep = '\\t', header = F, quote = \"\", row.names = T, stringsAsFactors = F, lessColInHeader = F)\nindiv_df = read_df(paste0(genotype_012_fn, '.indv'), header = F, row.names = F, stringsAsFactors = F)\npos_df = read_df(paste0(genotype_012_fn, '.pos'), header = F, row.names = F, stringsAsFactors = F)\nvcf_infos = read_vcf_variant_info(vcf_fn)\n\nstopifnot(nrow(geno_df)==nrow(indiv_df))\nstopifnot(ncol(geno_df)==nrow(pos_df))\nstopifnot(nrow(vcf_infos)==nrow(pos_df))\n\n### get ids from variant info, and double check unique mapping\npos_id_df = cbind(pos_df, vcf_infos)\nstopifnot(all(pos_id_df$V1 == pos_id_df$Chr))\nstopifnot(all(pos_id_df$V2 == pos_id_df$Pos))\n\n### set genotype id and indiv id\nrownames(geno_df) = indiv_df[,1]\ncolnames(geno_df) = pos_id_df[,'VariantID']\n\n### save \ngeno_df = t(geno_df)\nwrite_df(geno_df, file = out_fn)\n",
    "created" : 1541123428628.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2424318193",
    "id" : "755BB036",
    "lastKnownWriteTime" : 1522522238,
    "last_content_update" : 1522522238,
    "path" : "~/github/misc/cross_mappability/genotype_012_to_matrix.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}