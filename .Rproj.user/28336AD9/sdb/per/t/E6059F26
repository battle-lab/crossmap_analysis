{
    "collab_server" : "",
    "contents" : "### this script computes the background rate of cross-mappable eqtls\n\nlibrary(argparser)\nlibrary(data.table)\nsource('io_util.R')\n\nargs <- arg_parser('program')\nargs <- add_argument(args, '-expr', \n                     help='expression files - comma separated',\n                     default='/work-zfs/abattle4/ashis/progdata/misc/cross_mappability/gtex_v7/processed_expression/Muscle_Skeletal.v7.normalized_expression.txt,/work-zfs/abattle4/ashis/progdata/misc/cross_mappability/gtex_v7/processed_expression/Skin_Sun_Exposed_Lower_leg.v7.normalized_expression.txt,/work-zfs/abattle4/ashis/progdata/misc/cross_mappability/gtex_v7/processed_expression/Testis.v7.normalized_expression.txt,/work-zfs/abattle4/ashis/progdata/misc/cross_mappability/gtex_v7/processed_expression/Thyroid.v7.normalized_expression.txt,/work-zfs/abattle4/ashis/progdata/misc/cross_mappability/gtex_v7/processed_expression/Whole_Blood.v7.normalized_expression.txt')\nargs <- add_argument(args, '-geno', \n                     help='genotype directory',\n                     default='/work-zfs/abattle4/ashis/progdata/misc/cross_mappability/gtex_v7/genotype_process')\nargs <- add_argument(args, '-genosfx', \n                     help='genotype file suffix. note: prefix is chr name (e.g., chr3)',\n                     default='_maf_0.05_repeat_masked.012.txt')\nargs <- add_argument(args, \"-cross\", \n                     help=\"cross-mappability file\", \n                     default=\"/work-zfs/abattle4/lab_data/annotation/mappability_hg19_gencode19/hg19_cross_mappability_strength.txt\")\nargs <- add_argument(args, '-label',\n                     help='Tissue labels (comma-separated)',\n                     default='Muscle - Skeletal,Skin - Sun Exposed,Testis,Thyroid,Whole Blood')\nargs <- add_argument(args, \"-annot\", \n                     help=\"gencode annotation file (txt format)\", \n                     default=\"/work-zfs/abattle4/lab_data/annotation/gencode.v19/gencode.v19.annotation.gene.txt\")\nargs <- add_argument(args, '-o',\n                     help='output file',\n                     default='results/background_eqtl_crossmap.txt')\n\nargv <- parse_args(args)\nexpr_fn_input = argv$expr\ngenotype_dir = argv$geno\ngenotype_suffix = argv$genosfx\ncrossmap_fn = argv$cross\nlabels_input = argv$label\ngene_annot_fn = argv$annot\nout_fn <- argv$o\n\nchromosomes = paste0('chr', 1:22)\n\n### parse inputs\nparts = strsplit(expr_fn_input, split = ',')[[1]]\nis_valid_parts = sapply(parts, function(s) nchar(s)>0)\nexpr_files = parts[is_valid_parts]\n\nparts = strsplit(labels_input, split = ',')[[1]]\nis_valid_parts = sapply(parts, function(s) nchar(s)>0)\ntissue_labels = parts[is_valid_parts]\n\nstopifnot(length(expr_files) == length(tissue_labels))\n\n### read cross-map\ncrossmap_df = fread(input = crossmap_fn, sep = '\\t', header = F, stringsAsFactors = F, data.table = F, quote = \"\")\n# S-G is cross-mappable, if reads from another gene g near S map to G\n# given G, we need to find g such that crossmap(g->G) > 0\ncrossmap_per_gene = tapply(crossmap_df$V1, INDEX = crossmap_df$V2, FUN = c)\n\n### read gencode annotation and compute TSS\ngencode_df = read.table(gene_annot_fn, sep = '\\t', header = T, stringsAsFactors = F, quote = \"\", comment.char = \"\")\nrownames(gencode_df) = gencode_df$gene_id\n\n#tss with rownames as gene id, columns: chromosome_name, transcription_start_site\ntss_values =  as.integer(apply(gencode_df, MARGIN = 1, FUN = function(row){\n  ifelse(row['strand']==\"+\", row['start_pos'], row['end_pos'])\n}))\n\ntss = data.frame(chromosome_name = gencode_df[gencode_df$gene_id, 'chr'],\n                 transcription_start_site = tss_values, \n                 gene_id = gencode_df$gene_id,\n                 row.names = gencode_df$gene_id, \n                 stringsAsFactors = F)\n\n\n### read genotypes\nchr_snps <- lapply(chromosomes, function(chr){\n  print(paste('reading genotypes - ', chr))\n  genotype_fn = sprintf(\"%s/%s%s\", genotype_dir, chr, genotype_suffix)\n  genotype_df = read_df(genotype_fn)\n  snps = rownames(genotype_df)\n  snps_pos = as.integer(sapply(strsplit(snps, '_'), function(parts) parts[2]))\n  snps_df = data.frame(snp=snps, chr=chr, pos=snps_pos)\n  return(snps_df)\n})\nnames(chr_snps) = chromosomes\n\nn_snps_per_chr = sapply(chr_snps, function(snp_df) nrow(snp_df))\nn_possible_tests_per_gene_in_chr = sum(n_snps_per_chr) - n_snps_per_chr\nn_possible_tests_per_gene_in_chr['chrX'] = sum(n_snps_per_chr)\nn_possible_tests_per_gene_in_chr['chrY'] = sum(n_snps_per_chr)\n\n### function to access tss fast\ntss_gene_to_idx <- new.env(hash = T)\ntss_genes = rownames(tss)\ntmp <- sapply(1:length(tss_genes), function(idx) tss_gene_to_idx[[tss_genes[idx]]] <<- idx )\n\nget_tss_entries <- function(genes, cols=NULL){\n  tss_indexes = sapply(genes, function(g) tss_gene_to_idx[[g]])\n  if(is.null(cols))\n    return(tss[tss_indexes,,drop=F])\n  return(tss[tss_indexes,cols,drop=F])\n}\n\n### function to access gencode fast\ngencode_gene_to_idx <- new.env(hash = T)\ngencode_genes = rownames(gencode_df)\ntmp <- sapply(1:length(gencode_genes), function(idx) gencode_gene_to_idx[[gencode_genes[idx]]] <<- idx )\n\nget_gencode_entries <- function(genes, cols=NULL){\n  gencode_indexes = sapply(genes, function(g) gencode_gene_to_idx[[g]])\n  if(is.null(cols))\n    return(gencode_df[gencode_indexes,])\n  return(gencode_df[gencode_indexes,cols])\n}\n\n\n### get snps near a gene\nt1 = Sys.time()\nsnps_near_gene <- new.env(hash = T)\ntmp = lapply(rownames(gencode_df), function(cg){\n  d = 1e6\n  #cross_tss_info = tss[cg,,drop=F]\n  cross_tss_info = get_tss_entries(cg)\n  cross_chr = cross_tss_info[cg, 'chromosome_name']\n  cross_pos = cross_tss_info[cg, 'transcription_start_site']\n  is_near_tss = chr_snps[[cross_chr]]$pos>= (cross_pos-d) & chr_snps[[cross_chr]]$pos <= (cross_pos+d)\n  cross_snps = as.character(chr_snps[[cross_chr]][is_near_tss, 'snp'])\n  snps_near_gene[[cg]] <<- cross_snps\n  return()\n})\nt2 = Sys.time()\nt2 - t1\n\n\nbg_crossmap_rate = sapply(expr_files, function(expr_fn){\n  print(expr_fn)\n  expr_df = read_df(expr_fn, sep = '\\t', row.names = T)\n  genes = rownames(expr_df)\n  \n  get_trans_crossmap_count <- function(g){\n    # get cross-mappable genes in different chr\n    #cross_genes = intersect(crossmap_per_gene[[g]], genes)\n    cross_genes = crossmap_per_gene[[g]]\n    g_chr = gencode_df[g,'chr']\n    cross_genes_chr = gencode_df[cross_genes, 'chr']\n    cross_genes = cross_genes[cross_genes_chr != g_chr & cross_genes_chr %in% chromosomes]\n    \n    # get cross-mappinng snps\n    # cross_snps = lapply(cross_genes, function(cg){\n    #   cross_tss_info = tss[cg,,drop=F]\n    #   cross_chr = tss[cg, 'chromosome_name']\n    #   cross_pos = tss[cg, 'transcription_start_site']\n    #   is_near_tss = chr_snps[[cross_chr]]$pos>= (cross_pos-d) & chr_snps[[cross_chr]]$pos <= (cross_pos+d)\n    #   cross_snps = as.character(chr_snps[[cross_chr]][is_near_tss, 'snp'])\n    #   return(cross_snps)\n    # })\n    # cross_snps = unique(unlist(cross_snps))\n    \n    cross_snps = lapply(cross_genes, function(cg) snps_near_gene[[cg]])\n    cross_snps = unique(unlist(cross_snps))\n    \n    \n    # get #trans-eqtl tests\n    n_cross_trans_test = length(cross_snps)\n    n_total_trans_test = as.numeric(n_possible_tests_per_gene_in_chr[g_chr])\n    return(c(n_cross_trans_test=n_cross_trans_test, n_total_trans_test=n_total_trans_test))\n  }\n  \n  trans_test_counts = sapply(genes, get_trans_crossmap_count)\n  total_cross_tests = sum(trans_test_counts['n_cross_trans_test',])\n  total_trans_tests = sum(trans_test_counts['n_total_trans_test',])\n  bg_cross_eqtl_rate = total_cross_tests / total_trans_tests\n  \n  tmp_df = data.frame(fn= basename(expr_fn), total_trans_tests=total_trans_tests, total_cross_tests=total_cross_tests, bg_cross_eqtl_rate=bg_cross_eqtl_rate)\n  write.table(tmp_df, file = paste0(out_fn, '.tmp'), row.names = F, col.names = T, quote = F, append = T)\n\n  return(c(total_trans_tests=total_trans_tests, total_cross_tests=total_cross_tests, bg_cross_eqtl_rate=bg_cross_eqtl_rate))\n})\n\nbg_crossmap_rate_df = as.data.frame(t(bg_crossmap_rate))\nbg_crossmap_rate_df$tissue = tissue_labels\nbg_crossmap_rate_df$file = as.character(sapply(expr_files, basename))\n\nwrite_df(bg_crossmap_rate_df, file = out_fn, row.names = F, col.names = T)\n",
    "created" : 1541125221142.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2785282067",
    "id" : "E6059F26",
    "lastKnownWriteTime" : 1533985450,
    "last_content_update" : 1533985450,
    "path" : "~/github/misc/cross_mappability/bg_crossmap_eqtl_rate.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}